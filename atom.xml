<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我勒博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-03T06:01:46.336Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>guidefunction</title>
    <link href="http://example.com/2024/09/06/guidefunction/"/>
    <id>http://example.com/2024/09/06/guidefunction/</id>
    <published>2024-09-06T09:06:09.000Z</published>
    <updated>2025-04-03T06:01:46.336Z</updated>
    
    <content type="html"><![CDATA[<p>最近太忙没空写啥只能写写现在做的功能了，记录一下制作流程</p><p>需求<br>1.引导如何运转，数据结构如何设计<br>2.在一定条件下触发，进入引导<br>3.在引导的时候如何屏蔽输入，并且可以点击界面<br>4.引导的不同类型 引导点击，引导对话等<br>5.按节点保存引导，中途退出，需要续上</p><h3 id="问题一-首先需要设计引导的数据如何存储，并且如何运转起来"><a href="#问题一-首先需要设计引导的数据如何存储，并且如何运转起来" class="headerlink" title="问题一 首先需要设计引导的数据如何存储，并且如何运转起来"></a>问题一 首先需要设计引导的数据如何存储，并且如何运转起来</h3><p>引导在表里的设计是 从n开始 在连续的id中持续 直到它不连续，比如触发了引导101，在配置表中假如没有105的条目 ，那么此时的引导流是101,102,103,104，完成本次引导，因为可能同时触发引导，<br>我这里使用一个List<int> 在管理 当前引导的id是索引位置是0的数据，假如触发了101，和106的引导那么这个list是{101,106} ，当101完成后它为{106}， 这里的_runGuideIds是正在用的数据 而_saveGuideIds的用来保存的，可以看到每次保存的时候 直接覆盖保存即可，在GuideV2Manager里需要Update来持续判定是否需要引导，如果需要直接进入引导</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GuideSaveData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> GUIDE_VER2_DATA = <span class="string">&quot;GUIDE_VER2_DATA&quot;</span>;<span class="comment">//本地保存引导数据的key</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; _saveGuideIds = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(); <span class="comment">//引导的Id列表 允许存在多个</span></span><br><span class="line">    [<span class="meta">NonSerialized</span>] <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; _runGuideIds = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BindRunGuides</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _runGuideIds = _saveGuideIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeId</span>(<span class="params"><span class="built_in">int</span> guideId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> index = _runGuideIds.IndexOf(guideId - <span class="number">1</span>);</span><br><span class="line">        _runGuideIds[index] = guideId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EndGuide</span>(<span class="params"><span class="built_in">int</span> guideId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _runGuideIds.Remove(guideId);</span><br><span class="line">        Save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddGuideV2</span>(<span class="params"><span class="built_in">int</span> guideId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_runGuideIds.Contains(guideId))</span><br><span class="line">        &#123;</span><br><span class="line">            _runGuideIds.Add(guideId);</span><br><span class="line">            Save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _saveGuideIds = _runGuideIds;</span><br><span class="line">        SettingManager.SetString(GUIDE_VER2_DATA, JsonUtility.ToJson(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">GuideV2Manager</span> : <span class="title">Singleton</span>&lt;<span class="title">GuideV2Manager</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GuideSaveData _guideV2Data;         <span class="comment">//引导的数据</span></span><br><span class="line">    <span class="keyword">private</span> UIGuideV2TipCtrl _guideV2TipCtrl;   <span class="comment">//引导的ui</span></span><br><span class="line">    <span class="keyword">private</span> GuideV2Node _curGuideV2Node;        <span class="comment">//每个id 的引导对应的逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CurGuideId =&gt; _guideV2Data._runGuideIds.Count == <span class="number">0</span> ? <span class="number">0</span> : _guideV2Data._runGuideIds[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> NextGuideId =&gt; HasGuide ? CurGuideId + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> HasGuide =&gt; CurGuideId != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> HasNextGuide =&gt; Config.GetGuideVer2(NextGuideId) != <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _lastGuideId;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnCreated</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnCreated();</span><br><span class="line">        AddTriggerEvent();</span><br><span class="line">        Init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//init save data</span></span><br><span class="line">        <span class="keyword">var</span> g2D = SettingManager.GetString(GuideSaveData.GUIDE_VER2_DATA);</span><br><span class="line">        _guideV2Data = JsonUtility.FromJson&lt;GuideSaveData&gt;(g2D) ?? <span class="keyword">new</span> GuideSaveData();</span><br><span class="line">        _guideV2Data.BindRunGuides();</span><br><span class="line">        <span class="keyword">if</span> (CoRoutineExecutors.HasInstance())</span><br><span class="line">                CoRoutineExecutors.Instance.AddUpdateTask(Tick);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Tick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!HasGuide)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_guideV2TipCtrl == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _guideV2TipCtrl = UIManager.Instance.ShowView&lt;UIGuideV2TipCtrl&gt;(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_curGuideV2Node == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _curGuideV2Node = GetNode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _curGuideV2Node.Tick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddGuideV2</span>(<span class="params"><span class="built_in">int</span> guideId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _guideV2Data.AddGuideV2(guideId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToEndGuide</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _curGuideV2Node.End();</span><br><span class="line">        <span class="keyword">if</span> (HasNextGuide)</span><br><span class="line">        &#123;</span><br><span class="line">            _lastGuideId = CurGuideId;</span><br><span class="line">            <span class="keyword">if</span> (_curGuideV2Node.NeedSave)</span><br><span class="line">            &#123;</span><br><span class="line">                _guideV2Data.Save();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _guideV2Data.ChangeId(NextGuideId);</span><br><span class="line">            _curGuideV2Node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _guideV2Data.EndGuide(CurGuideId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="问题二-解决如何触发引导"><a href="#问题二-解决如何触发引导" class="headerlink" title="问题二 解决如何触发引导"></a>问题二 解决如何触发引导</h3><p>只需要监听引导触发的条件即可，满足条件，触发，这里满足的条件可以考虑通过ScriptableObject方式存储</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTriggerEvent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    EventManager.AddHandler(GameEventType.BuildingUpgrade, BuildingUpgrade);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveTriggerEvent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    EventManager.RemoveHandler(GameEventType.BuildingUpgrade, BuildingUpgrade);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildingUpgrade</span>(<span class="params">IEvent obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> e = (EventInt3)obj;</span><br><span class="line">    <span class="keyword">var</span> guideId = GameConfig.GameConfig.Instance.GetBuildsTriggerId(e._data1);</span><br><span class="line">    <span class="keyword">if</span> (guideId != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        AddGuideV2(guideId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题三-解决如何屏蔽界面"><a href="#问题三-解决如何屏蔽界面" class="headerlink" title="问题三 解决如何屏蔽界面"></a>问题三 解决如何屏蔽界面</h3><p>这里有很多方式 我的方法是在在引导的ui界面增加一个全局的Mask，这个Mask它会接受点击的输入,并对输入判定是否点击到了我需要点击的物体</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIGuideV2Mask</span> : <span class="title">MonoBehaviour</span>, <span class="title">IPointerClickHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject _canClickGo;</span><br><span class="line">    <span class="keyword">private</span> Action _action;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定需要点击的物体,和点击到对应物体的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BindCanClick</span>(<span class="params">GameObject clickGo, Action action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _canClickGo = clickGo;</span><br><span class="line">        _action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerClick</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;RaycastResult&gt; results = <span class="keyword">new</span> List&lt;RaycastResult&gt;();</span><br><span class="line">        EventSystem.current.RaycastAll(eventData, results);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">bool</span> hitThisObject = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> result <span class="keyword">in</span> results)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.gameObject == _canClickGo)</span><br><span class="line">            &#123;</span><br><span class="line">                _action?.Invoke();</span><br><span class="line">                ExecuteEvents.Execute(result.gameObject, eventData, ExecuteEvents.pointerClickHandler);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题四-如何处理不同的引导模式"><a href="#问题四-如何处理不同的引导模式" class="headerlink" title="问题四 如何处理不同的引导模式"></a>问题四 如何处理不同的引导模式</h3><p>引导可能的模式有很多种 我这里倾向于只在引导的逻辑表里配上 通用的步骤，对于特殊的需求，可以直接在代码里写死</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> GuideV2Node <span class="title">GetNode</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> config = Config.GetGuideVer2(CurGuideId);</span><br><span class="line">    <span class="keyword">if</span> (config.Type == (<span class="built_in">int</span>)GuideV2NodeType.UIClick)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UIClickGuideV2Node().Bind(config, _guideV2TipCtrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.Type == (<span class="built_in">int</span>)GuideV2NodeType.Talk)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TalkGuideV2Node().Bind(config, _guideV2TipCtrl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">GuideV2Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> GuideVer2 _config;</span><br><span class="line">    <span class="keyword">protected</span> UIGuideV2TipCtrl _guideV2TipCtrl;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> NeedSave =&gt; _config.IsSave;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GuideV2Node <span class="title">Bind</span>(<span class="params">GuideVer2 config, UIGuideV2TipCtrl guideV2TipCtrl</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _config = config;</span><br><span class="line">        _guideV2TipCtrl = guideV2TipCtrl;</span><br><span class="line">        Config();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Config</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Tick</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">End</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _guideV2TipCtrl.NeedMak = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIClickGuideV2Node</span> : <span class="title">GuideV2Node</span></span><br><span class="line"></span><br><span class="line"><span class="title">public</span> <span class="keyword">class</span> <span class="title">TalkGuideV2Node</span> : <span class="title">GuideV2Node</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近太忙没空写啥只能写写现在做的功能了，记录一下制作流程&lt;/p&gt;
&lt;p&gt;需求&lt;br&gt;1.引导如何运转，数据结构如何设计&lt;br&gt;2.在一定条件下触发，进入引导&lt;br&gt;3.在引导的时候如何屏蔽输入，并且可以点击界面&lt;br&gt;4.引导的不同类型 引导点击，引导对话等&lt;br&gt;5.按节</summary>
      
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    <category term="新手引导" scheme="http://example.com/categories/unity/%E6%96%B0%E6%89%8B%E5%BC%95%E5%AF%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>touch</title>
    <link href="http://example.com/2024/09/04/touch/"/>
    <id>http://example.com/2024/09/04/touch/</id>
    <published>2024-09-04T03:37:08.000Z</published>
    <updated>2025-04-03T06:03:11.514Z</updated>
    
    <content type="html"><![CDATA[<p>问题:在Unity点击事件中如何检测手势呢? 如何在不同平台互通呢？<br>实现统一的手势检测脚本是必要的，总不能每次使用的时候都写一遍</p><p>1.方法一 是可以通过继承 IPointerDownHandler，IPointerUpHandler，IDragHandler等接口监听对应的事件，在判断是否达成对应的手势<br>这样实现的逻辑在多平台都是可行的 window的鼠标点击 和移动平台的Touc都会响应接口</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIFingerTrigger</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    , <span class="title">IPointerDownHandler</span></span><br><span class="line">    , <span class="title">IPointerUpHandler</span></span><br><span class="line">    , <span class="title">IDragHandler</span></span><br><span class="line">    , <span class="title">IBeginDragHandler</span></span><br><span class="line">    , <span class="title">IEndDragHandler</span></span><br><span class="line">    , <span class="title">IScrollHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">float</span>&gt; OnPinch;  <span class="comment">//双指放大 缩小</span></span><br><span class="line">    <span class="keyword">public</span> Action&lt;Vector2&gt; OnDrag; <span class="comment">//拖拽</span></span><br><span class="line">    <span class="keyword">public</span> Action OnDragEnd;        <span class="comment">//拖拽结束</span></span><br><span class="line">    <span class="keyword">public</span> Action&lt;Vector2&gt; OnClick;  <span class="comment">//点击</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IBeginDragHandler.OnBeginDrag(PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IDragHandler.OnDrag(PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IEndDragHandler.OnEndDrag(PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IPointerDownHandler.OnPointerDown(PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IPointerUpHandler.OnPointerUp(PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IScrollHandler.OnScroll(PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现一下具体的手释功能 这里可以定制化 实现特殊需求 这里只展示一下这里的手势逻辑</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIFingerTrigger</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">        , <span class="title">IPointerDownHandler</span></span><br><span class="line">        , <span class="title">IPointerUpHandler</span></span><br><span class="line">        , <span class="title">IDragHandler</span></span><br><span class="line">        , <span class="title">IBeginDragHandler</span></span><br><span class="line">        , <span class="title">IEndDragHandler</span></span><br><span class="line">        , <span class="title">IScrollHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Action&lt;<span class="built_in">float</span>&gt; OnPinch;</span><br><span class="line">        <span class="keyword">public</span> Action&lt;Vector2&gt; OnDrag;</span><br><span class="line">        <span class="keyword">public</span> Action OnDragEnd;</span><br><span class="line">        <span class="keyword">public</span> Action&lt;Vector2&gt; OnClick;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">PointData</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> _pointId; <span class="comment">//点 id</span></span><br><span class="line">            <span class="keyword">public</span> Vector2 _pointPosition; <span class="comment">//点 位置</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">bool</span> _down; <span class="comment">//是否按下</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> List&lt;PointData&gt; _pointData = <span class="keyword">new</span> List&lt;PointData&gt;() <span class="comment">//最多2指操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> PointData(),</span><br><span class="line">            <span class="keyword">new</span> PointData(),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> _pointDistance; <span class="comment">//双点距离</span></span><br><span class="line">        <span class="comment">//拖拽状态</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _drag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//双指操作</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _pinch = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> PointerEventData _pointerDragData;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetPointCount</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> point <span class="keyword">in</span> _pointData)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (point._down)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddPoint</span>(<span class="params">PointerEventData pointData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; <span class="number">2</span>; index++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!_pointData[index]._down)</span><br><span class="line">                &#123;</span><br><span class="line">                    _pointData[index]._pointId = pointData.pointerId;</span><br><span class="line">                    _pointData[index]._pointPosition = pointData.position;</span><br><span class="line">                    _pointData[index]._down = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RemovePoint</span>(<span class="params">PointerEventData pointData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            PointData removePoint = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> point <span class="keyword">in</span> _pointData)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (point._pointId == pointData.pointerId)</span><br><span class="line">                &#123;</span><br><span class="line">                    point._down = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdatePoint</span>(<span class="params">PointerEventData pointData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> point <span class="keyword">in</span> _pointData)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (point._pointId == pointData.pointerId)</span><br><span class="line">                &#123;</span><br><span class="line">                    point._pointPosition = pointData.position;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IBeginDragHandler.OnBeginDrag(PointerEventData eventData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (GetPointCount() == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _drag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (GetPointCount() == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _drag = <span class="literal">true</span>; <span class="comment">// 双手的时候 算 但是也在拖拽 为了屏蔽 双手释放的</span></span><br><span class="line">                _pinch = <span class="literal">true</span>;</span><br><span class="line">                _pointDistance = Vector2.Distance(_pointData[<span class="number">0</span>]._pointPosition, _pointData[<span class="number">1</span>]._pointPosition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IDragHandler.OnDrag(PointerEventData eventData)</span><br><span class="line">        &#123;</span><br><span class="line">            _pointerDragData = eventData;</span><br><span class="line">            UpdatePoint(eventData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IEndDragHandler.OnEndDrag(PointerEventData eventData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_pinch)</span><br><span class="line">            &#123;</span><br><span class="line">                _pinch = <span class="literal">false</span>;</span><br><span class="line">                OnPinch?.Invoke(<span class="number">0f</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (_drag)</span><br><span class="line">            &#123;</span><br><span class="line">                _drag = <span class="literal">false</span>;</span><br><span class="line">                OnDragEnd?.Invoke();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IPointerDownHandler.OnPointerDown(PointerEventData eventData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (GetPointCount() &lt; <span class="number">2</span>) <span class="comment">//只考虑 2个手指</span></span><br><span class="line">            &#123;</span><br><span class="line">                AddPoint(eventData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IPointerUpHandler.OnPointerUp(PointerEventData eventData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_drag &amp;&amp; !_pinch &amp;&amp; GetPointCount() == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                OnClick?.Invoke(eventData.position);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RemovePoint(eventData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !UNITY_EDITOR</span></span><br><span class="line">            <span class="keyword">if</span> (Input.touchCount == <span class="number">0</span>) <span class="comment">//容错</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> point <span class="keyword">in</span> _pointData)</span><br><span class="line">                &#123;</span><br><span class="line">                    point._down = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">if</span> (_pointerDragData == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_pinch)</span><br><span class="line">                &#123;</span><br><span class="line">                    OnPinch?.Invoke(<span class="number">0f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (_drag)</span><br><span class="line">                &#123;</span><br><span class="line">                    OnDrag?.Invoke(Vector2.zero);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_pinch)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">float</span> distance = Vector2.Distance(_pointData[<span class="number">0</span>]._pointPosition, _pointData[<span class="number">1</span>]._pointPosition);</span><br><span class="line">                <span class="built_in">float</span> opDistance = _pointDistance - distance;</span><br><span class="line">                <span class="keyword">if</span> (Mathf.Abs(opDistance) &gt; <span class="number">0.8f</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    OnPinch?.Invoke(opDistance);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    OnPinch?.Invoke(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _pointDistance = distance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (_drag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_pointerDragData.pointerId == _pointData[<span class="number">0</span>]._pointId)</span><br><span class="line">                &#123;</span><br><span class="line">                    OnDrag?.Invoke(_pointerDragData.delta);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _pointerDragData = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IScrollHandler.OnScroll(PointerEventData eventData)</span><br><span class="line">        &#123;</span><br><span class="line">            OnPinch?.Invoke(eventData.scrollDelta.y * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>缺点 上面的代码可以实现效果 但是因为脚本是继承MonoBehaviour的 对应检测的范围是MonoBehaviour所在UI物体的大小</p><p>2.方法二：不依赖接口的实现 通过使用Input类监听 这里移动平台使用Input.GetTouch来收集手指,pc平台使用Input.GetMouseButton<br>收集到手指处理对应的手势逻辑即可</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Finger</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Touch</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>] [Head(<span class="string">&quot;移动多少像素才算拖拽&quot;</span>)] <span class="keyword">private</span> <span class="built_in">int</span> _threshold = <span class="number">100</span>; <span class="comment">//移动多少才算拖拽</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] [Head(<span class="string">&quot;按多长时间算点击&quot;</span>)] <span class="keyword">private</span> <span class="built_in">float</span> _tapThreshold = <span class="number">0.2f</span>; <span class="comment">//按多长时间算点击</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] [Head(<span class="string">&quot;是否多手指&quot;</span>)] <span class="keyword">public</span> <span class="built_in">bool</span> _stopMulEvent; <span class="comment">//屏蔽多手指</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _stop; <span class="comment">//是否停止触控</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Finger&gt; _sFingers = <span class="keyword">new</span> List&lt;Finger&gt;(<span class="number">10</span>);</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;快速点击&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnTap; <span class="comment">//快速点击回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;移动中&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnMove; <span class="comment">//移动中回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;长按抬起 拖拽抬起&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnSwipe; <span class="comment">//长按抬起回调 或者 拖拽抬起回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;抬起&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnUp; <span class="comment">//抬起回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;缩放&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;<span class="built_in">float</span>&gt; OnPinch; <span class="comment">//缩放回调</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CollectFinger();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CollectFinger</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.touchCount &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt;= Input.touchCount - <span class="number">1</span>; index++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> touch = Input.GetTouch(index);</span><br><span class="line">                <span class="keyword">if</span> (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Stationary ||</span><br><span class="line">                    touch.phase == TouchPhase.Moved)</span><br><span class="line">                &#123;</span><br><span class="line">                    AddFinger(index, touch.position);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> screen = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, Screen.width, Screen.height);</span><br><span class="line">                <span class="keyword">var</span> mousePos = Input.mousePosition;</span><br><span class="line">                Vector2 mp = <span class="keyword">new</span> Vector2(mousePos.x, mousePos.y);</span><br><span class="line">                <span class="keyword">if</span> (screen.Contains(mp))</span><br><span class="line">                &#123;</span><br><span class="line">                    AddFinger(<span class="number">-1</span>, mp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，展示一下这里的手势实现，可自行实现定制化的手势。<br>这种方法通过 _set,_lastSet在不同状态下的值来确定手指的状态 很巧妙如下<br>(set lastSet)  true false 按下  — &gt; true true 持续按下 —– &gt; true true …. —– &gt; false true 抬起</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Finger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> _set; <span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> _lastSet; <span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> _tap; <span class="comment">//点击</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> _swipe; <span class="comment">//长按抬起 或者 拖动抬起</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> _move; <span class="comment">//是否移动中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> _dragging; <span class="comment">//是否推拽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _index; <span class="comment">//手指索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> _age; <span class="comment">//手指持续时间</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 _startScreenPos; <span class="comment">//手指开始触屏位置</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 _lastScreenPos; <span class="comment">//上一帧手指位置</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 _screenPos; <span class="comment">//更新中的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsUp</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !_set &amp;&amp; _lastSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector2 <span class="title">GetSwipeScreenDelta</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _screenPos - _startScreenPos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsDown</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _set &amp;&amp; !_lastSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Touch</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>] [Head(<span class="string">&quot;移动多少像素才算拖拽&quot;</span>)] <span class="keyword">private</span> <span class="built_in">int</span> _threshold = <span class="number">100</span>; <span class="comment">//移动多少才算拖拽</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] [Head(<span class="string">&quot;按多长时间算点击&quot;</span>)] <span class="keyword">private</span> <span class="built_in">float</span> _tapThreshold = <span class="number">0.2f</span>; <span class="comment">//按多长时间算点击</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] [Head(<span class="string">&quot;是否多手指&quot;</span>)] <span class="keyword">public</span> <span class="built_in">bool</span> _stopMulEvent; <span class="comment">//屏蔽多手指</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _stop; <span class="comment">//是否停止触控</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Finger&gt; _sFingers = <span class="keyword">new</span> List&lt;Finger&gt;(<span class="number">10</span>);</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;快速点击&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnTap; <span class="comment">//快速点击回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;移动中&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnMove; <span class="comment">//移动中回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;长按抬起 拖拽抬起&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnSwipe; <span class="comment">//长按抬起回调 或者 拖拽抬起回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;抬起&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;Finger&gt; OnUp; <span class="comment">//抬起回调</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;缩放&quot;</span>)</span>] <span class="keyword">public</span> UnityEvent&lt;<span class="built_in">float</span>&gt; OnPinch; <span class="comment">//缩放回调</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单手指</span></span><br><span class="line">        BeginFinger();</span><br><span class="line">        CollectFinger();</span><br><span class="line">        EndFinger();</span><br><span class="line">        UpdateEvents();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多手指缩放</span></span><br><span class="line">        UpdateMulFinger();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stop();</span><br><span class="line">        OnTap = <span class="literal">null</span>;</span><br><span class="line">        OnPinch = <span class="literal">null</span>;</span><br><span class="line">        OnSwipe = <span class="literal">null</span>;</span><br><span class="line">        OnMove = <span class="literal">null</span>;</span><br><span class="line">        OnUp = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Finger <span class="title">FindFinger</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> finger <span class="keyword">in</span> _sFingers)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (finger._index == index)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> finger;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BeginFinger</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> index = _sFingers.Count - <span class="number">1</span>; index &gt;= <span class="number">0</span>; index--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> finger = _sFingers[index];</span><br><span class="line">            <span class="keyword">if</span> (finger.IsUp())</span><br><span class="line">            &#123;</span><br><span class="line">                _sFingers.RemoveAt(index);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                finger._lastSet = finger._set;</span><br><span class="line">                finger._lastScreenPos = finger._screenPos;</span><br><span class="line">                finger._set = <span class="literal">false</span>;</span><br><span class="line">                finger._tap = <span class="literal">false</span>;</span><br><span class="line">                finger._swipe = <span class="literal">false</span>;</span><br><span class="line">                finger._move = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CollectFinger</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.touchCount &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt;= Input.touchCount - <span class="number">1</span>; index++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> touch = Input.GetTouch(index);</span><br><span class="line">                <span class="keyword">if</span> (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Stationary ||</span><br><span class="line">                    touch.phase == TouchPhase.Moved)</span><br><span class="line">                &#123;</span><br><span class="line">                    AddFinger(index, touch.position);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> screen = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, Screen.width, Screen.height);</span><br><span class="line">                <span class="keyword">var</span> mousePos = Input.mousePosition;</span><br><span class="line">                Vector2 mp = <span class="keyword">new</span> Vector2(mousePos.x, mousePos.y);</span><br><span class="line">                <span class="keyword">if</span> (screen.Contains(mp))</span><br><span class="line">                &#123;</span><br><span class="line">                    AddFinger(<span class="number">-1</span>, mp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddFinger</span>(<span class="params"><span class="built_in">int</span> index, Vector2 position</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> finger = FindFinger(index);</span><br><span class="line">        <span class="keyword">if</span> (finger == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            finger = <span class="keyword">new</span> Finger()</span><br><span class="line">            &#123;</span><br><span class="line">                _index = index,</span><br><span class="line">                _startScreenPos = position,</span><br><span class="line">                _lastScreenPos = position,</span><br><span class="line">                _lastSet = <span class="literal">false</span>,</span><br><span class="line">                _age = <span class="number">0</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            _sFingers.Add(finger);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        finger._set = <span class="literal">true</span>;</span><br><span class="line">        finger._screenPos = position;</span><br><span class="line">        <span class="keyword">if</span> (!finger._dragging)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> sqrMagnitude = finger.GetSwipeScreenDelta().sqrMagnitude;</span><br><span class="line">            <span class="keyword">if</span> (sqrMagnitude &gt;= _threshold)</span><br><span class="line">            &#123;</span><br><span class="line">                finger._dragging = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EndFinger</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> index = _sFingers.Count - <span class="number">1</span>; index &gt;= <span class="number">0</span>; index--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> finger = _sFingers[index];</span><br><span class="line">            <span class="keyword">if</span> (finger.IsUp())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (finger._age &lt;= _tapThreshold &amp;&amp; finger._age &gt;= <span class="number">0</span> &amp;&amp; !finger._dragging)</span><br><span class="line">                &#123;</span><br><span class="line">                    finger._tap = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    finger._swipe = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!finger.IsDown())</span><br><span class="line">            &#123;</span><br><span class="line">                finger._move = <span class="literal">true</span>;</span><br><span class="line">                finger._age += +Time.unscaledDeltaTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateEvents</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_sFingers.Count == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TriggerEvent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_stopMulEvent)</span><br><span class="line">            &#123;</span><br><span class="line">                TriggerEvent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TriggerEvent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> finger <span class="keyword">in</span> _sFingers)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (finger.IsUp())</span><br><span class="line">                OnUp?.Invoke(finger);</span><br><span class="line">            <span class="keyword">if</span> (finger._tap)</span><br><span class="line">                OnTap?.Invoke(finger);</span><br><span class="line">            <span class="keyword">if</span> (finger._swipe)</span><br><span class="line">                OnSwipe?.Invoke(finger);</span><br><span class="line">            <span class="keyword">if</span> (finger._move)</span><br><span class="line">                OnMove?.Invoke(finger);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateMulFinger</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stopMulEvent)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_sFingers.Count &gt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算所有手指中心点</span></span><br><span class="line">            Vector2 curCenterPos = Vector2.zero;</span><br><span class="line">            Vector2 lastCenterPos = Vector2.zero;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> finger <span class="keyword">in</span> _sFingers)</span><br><span class="line">            &#123;</span><br><span class="line">                curCenterPos += finger._screenPos;</span><br><span class="line">                lastCenterPos += finger._lastScreenPos;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> fingerCount = _sFingers.Count;</span><br><span class="line">            curCenterPos /= fingerCount;</span><br><span class="line">            lastCenterPos /= fingerCount;</span><br><span class="line">            <span class="comment">//计算所有手指到中心点的距离</span></span><br><span class="line">            <span class="built_in">float</span> curDistance = <span class="number">0</span>, lastDistance = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> finger <span class="keyword">in</span> _sFingers)</span><br><span class="line">            &#123;</span><br><span class="line">                curDistance += Vector2.Distance(curCenterPos, finger._screenPos);</span><br><span class="line">                lastDistance += Vector2.Distance(lastCenterPos, finger._lastScreenPos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            curDistance /= fingerCount;</span><br><span class="line">            lastDistance /= fingerCount;</span><br><span class="line">            <span class="keyword">if</span> (lastDistance &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> scale = curDistance / lastDistance;</span><br><span class="line">                <span class="keyword">if</span> (scale &gt; <span class="number">0</span> &amp;&amp; scale &lt; <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    OnPinch?.Invoke(scale - <span class="number">1.0f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> scroll = Input.mouseScrollDelta.y;</span><br><span class="line">        <span class="keyword">if</span> (scroll != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            scroll /= <span class="number">10</span>;</span><br><span class="line">            OnPinch?.Invoke(scroll);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _stop = <span class="literal">true</span>;</span><br><span class="line">        _sFingers.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReTouch</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_stop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _stop = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式 实现无需额外的操作 使用上很方便</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题:在Unity点击事件中如何检测手势呢? 如何在不同平台互通呢？&lt;br&gt;实现统一的手势检测脚本是必要的，总不能每次使用的时候都写一遍&lt;/p&gt;
&lt;p&gt;1.方法一 是可以通过继承 IPointerDownHandler，IPointerUpHandler，IDragHand</summary>
      
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    <category term="Touch辅助" scheme="http://example.com/categories/unity/Touch%E8%BE%85%E5%8A%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>48.16 fixed</title>
    <link href="http://example.com/2024/09/02/48.16fixed/"/>
    <id>http://example.com/2024/09/02/48.16fixed/</id>
    <published>2024-09-02T07:22:34.000Z</published>
    <updated>2025-04-03T06:04:15.148Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下项目中定点数的使用</p><h3 id="为什么要使用？（个人看法）"><a href="#为什么要使用？（个人看法）" class="headerlink" title="为什么要使用？（个人看法）"></a>为什么要使用？（个人看法）</h3><p>1.保证在不同的环境（硬件 软件）保证结果是幂等的<br>2.客户端环境 服务器环境下 如果结果是一样的 可以在服务器模拟数值 如果和客户端不一致 可以用于作弊检测<br>3.在帧同步的游戏中保证每个客户端运算结果一致是必要的</p><p><span style="color: red;">下面定点数用fp_{0} 表示  {0} 为十进制  fp_1 &#x3D; 1 </span></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>定点数 分为整数播放和小数部分 48.16的意思是整数占48位,小数16位</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">struct</span> fp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> FRACTIONAL_PLACES = <span class="number">16</span>;<span class="comment">//小数16</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> INTER_PLACES = <span class="number">48</span>;<span class="comment">//整数48</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">long</span> ONE = <span class="number">1L</span> &lt;&lt; FRACTIONAL_PLACES; <span class="comment">// fp_1 的_serializedValue的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> _serializedValue;<span class="comment">//这里表示的是fp的数据储存 用2进制表示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例说明：fp_1表示 1 00000000 00000000 为 1&lt;&lt;16 是65536 所以_serializedValue的值是 65536</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fp(65536L) = fp_1</span></span><br><span class="line">fp(<span class="built_in">long</span> rawValue)</span><br><span class="line">&#123;</span><br><span class="line">    _serializedValue = rawValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fp(1) = fp_1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">fp</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _serializedValue = <span class="keyword">value</span> * ONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转为float 理解不了 看下面 其实是倍数的关系</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">float</span>(<span class="params">fp <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">float</span>)<span class="keyword">value</span>._serializedValue / ONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fp的最小单位:这里fp(1L) 表示的值 其实就是最小的小数精度 它的 _serializedValue &#x3D; 1L   其十进制为1L&#x2F;65536 约为0.0000152587890625m<br>不难发现 其实fp(1L) 可以理解为十进制的数字1,其他fp都是它的倍数 比如fp_1 是fp(1L)的65536倍数<br>这样看来 fp加减的运算就呼之欲出了,单纯的倍数加减法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单相加可以</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> fp <span class="title">Add</span>(<span class="params">fp x, fp y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> fp(x._serializedValue + y._serializedValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> fp <span class="title">Sub</span>(<span class="params">fp x, fp y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> fp(x._serializedValue - y._serializedValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于乘除不可直接对单_serializedValue进行乘除法 因为fp_1的_serializedValue是65536 而不是1</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> fp <span class="title">Mul</span>(<span class="params">fp x, fp y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> xl = x._serializedValue;</span><br><span class="line">    <span class="keyword">var</span> yl = y._serializedValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意这里的运算都是整数计算 没有小数</span></span><br><span class="line">    <span class="keyword">var</span> xlo = (<span class="built_in">ulong</span>)(xl &amp; <span class="number">0x000000000000FFFF</span>);<span class="comment">//小数部分</span></span><br><span class="line">    <span class="keyword">var</span> xhi = xl &gt;&gt; FRACTIONAL_PLACES;         <span class="comment">//整数部分</span></span><br><span class="line">    <span class="keyword">var</span> ylo = (<span class="built_in">ulong</span>)(yl &amp; <span class="number">0x000000000000FFFF</span>);</span><br><span class="line">    <span class="keyword">var</span> yhi = yl &gt;&gt; FRACTIONAL_PLACES;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（xhi+xlo)*(yhi*ylo) = xhi*yhi + xhi*ylo +xlo*yhi +xlo*ylo</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lolo = xlo * ylo;</span><br><span class="line">    <span class="keyword">var</span> lohi = (<span class="built_in">long</span>)xlo * yhi;</span><br><span class="line">    <span class="keyword">var</span> hilo = xhi * (<span class="built_in">long</span>)ylo;</span><br><span class="line">    <span class="keyword">var</span> hihi = xhi * yhi;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//精度修复</span></span><br><span class="line">    <span class="keyword">var</span> loResult = lolo &gt;&gt; FRACTIONAL_PLACES;</span><br><span class="line">    <span class="keyword">var</span> midResult1 = lohi;</span><br><span class="line">    <span class="keyword">var</span> midResult2 = hilo;</span><br><span class="line">    <span class="keyword">var</span> hiResult = hihi &lt;&lt; FRACTIONAL_PLACES;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = (<span class="built_in">long</span>)loResult + midResult1 + midResult2 + hiResult;</span><br><span class="line">    fp result; <span class="comment">// = default(FP);</span></span><br><span class="line">    result._serializedValue = sum;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于LUT的使用 我的理解就是 提前计算出结果 使用的时候 映射过去</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">struct</span> fp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">long</span> PI_OVER_2 = <span class="number">102944</span>;              <span class="comment">//π/2</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> LUT_SIZE = (<span class="built_in">int</span>)(PI_OVER_2 &lt;&lt; <span class="number">1</span>); <span class="comment">//LUT</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> fp PiOver2 = <span class="keyword">new</span> fp(PI_OVER_2); <span class="comment">//fp_π/2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> fp LutInterval = (fp)(LUT_SIZE - <span class="number">1</span>) / PiOver2;/每个LUT的间隔</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入到文件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; LUT_SIZE; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//sin 是对称的 只记录2/π就可以</span></span><br><span class="line">    <span class="keyword">var</span> angle = i * Math.PI * <span class="number">0.5</span> / (LUT_SIZE - <span class="number">1</span>); <span class="comment">//每次增加 LutInterval个单位</span></span><br><span class="line">    <span class="keyword">var</span> sin = Math.Sin(angle);</span><br><span class="line">    <span class="keyword">var</span> rawValue = ((fp)sin)._serializedValue;</span><br><span class="line">    <span class="comment">//var writeValue = string.Format(&quot;0x&#123;0:X&#125;L, &quot;, rawValue);</span></span><br><span class="line">    <span class="comment">//writer.Write(writeValue);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> fp <span class="title">Sin</span>(<span class="params">fp x</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> flipHorizontal, flipVertical;</span><br><span class="line">    <span class="comment">//这个api 是帮fp映射到0-2π flipHorizontal表示是否大于2/π flipVertical表示是否大于π</span></span><br><span class="line">    <span class="keyword">var</span> clampedL = ClampSinValue(x._serializedValue, <span class="keyword">out</span> flipHorizontal, <span class="keyword">out</span> flipVertical);</span><br><span class="line">    <span class="keyword">var</span> clamped = <span class="keyword">new</span> fp(clampedL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rawIndex = clamped*LutInterval;<span class="comment">//在LUT 的映射位置</span></span><br><span class="line">    <span class="keyword">var</span> roundedIndex = Round(rawIndex);<span class="comment">//拿到最接近的位置</span></span><br><span class="line">    <span class="keyword">var</span> indexError = FastSub(rawIndex, roundedIndex);<span class="comment">//误差</span></span><br><span class="line">    <span class="comment">//对于2/π后的播放 倒序那结果</span></span><br><span class="line">    <span class="keyword">var</span> nearestValue =</span><br><span class="line">        <span class="keyword">new</span> fp(SinLut[flipHorizontal ? SinLut.Length - <span class="number">1</span> - (<span class="built_in">int</span>)roundedIndex : (<span class="built_in">int</span>)roundedIndex]);</span><br><span class="line">    <span class="keyword">var</span> secondNearestValue =</span><br><span class="line">        <span class="keyword">new</span> fp(SinLut[</span><br><span class="line">            flipHorizontal</span><br><span class="line">                ? SinLut.Length - <span class="number">1</span> - (<span class="built_in">int</span>)roundedIndex - Sign(indexError)</span><br><span class="line">                : (<span class="built_in">int</span>)roundedIndex + Sign(indexError)]);</span><br><span class="line">    <span class="comment">//获取差值  通过最近的值和第二进的值的误差和indexError的乘积表示结果</span></span><br><span class="line">    <span class="keyword">var</span> delta = FastMul(indexError, FastAbs(FastSub(nearestValue, secondNearestValue)))._serializedValue;</span><br><span class="line">    <span class="keyword">var</span> interpolatedValue = nearestValue._serializedValue + (flipHorizontal ? -delta : delta);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//π前后的结果 符号相反</span></span><br><span class="line">    <span class="keyword">var</span> finalValue = flipVertical ? -interpolatedValue : interpolatedValue;</span><br><span class="line">    fp a2 = <span class="keyword">new</span> fp(finalValue);</span><br><span class="line">    <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面说的只是简单的介绍能够看对应的代码 对于越界问题，算法问题 没有涉及 研究明白在填<br><a href="https://github.com/yingyugang/FixedPointPhysics/tree/develop/Assets/FixedPointPhysics/Scripts/Math">代码来源点这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下项目中定点数的使用&lt;/p&gt;
&lt;h3 id=&quot;为什么要使用？（个人看法）&quot;&gt;&lt;a href=&quot;#为什么要使用？（个人看法）&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用？（个人看法）&quot;&gt;&lt;/a&gt;为什么要使用？（个人看法）&lt;/h3&gt;&lt;p&gt;1.保证在</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="定点数" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/%E5%AE%9A%E7%82%B9%E6%95%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>sceneManager</title>
    <link href="http://example.com/2024/08/30/sceneManager/"/>
    <id>http://example.com/2024/08/30/sceneManager/</id>
    <published>2024-08-30T09:50:13.000Z</published>
    <updated>2025-04-03T06:02:36.993Z</updated>
    
    <content type="html"><![CDATA[<p>unity 的场景管理思路</p><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><ol><li>加载场景是异步的 很容易出现在加载A场景的时候 同时卸载A场景，或者再次加载B场景等，如何保证结果正确</li><li>场景和场景之间的（Lighting）灯光，（Volume）后处理，（AudioListener）声音等，如何找到？如何管理？</li><li>如何无缝的切换场景，并且优雅的进行的过渡</li></ol><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>问题1 异步的问题 可以通过队列任务的方式来实现，每个任务都必须执行完成在能执行下一个任务，任务之间是独立的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//场景任务队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Queue&lt;SceneTask&gt; _sceneTaskQueue = <span class="keyword">new</span> Queue&lt;SceneTask&gt;();</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnCreated</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_main == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _main = CoRoutineExecutors.Run(TickSceneTask()); <span class="comment">//开启携程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">TickSceneTask</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_sceneTaskQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> sceneTask = _sceneTaskQueue.Dequeue();</span><br><span class="line">            <span class="comment">//DoTask</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题2 管理的方式,首先规定 场景的（灯光，声音，后期等）等每个场景之间都是独立的，不存在共享的关系（也不是一定可以自行定义）<br>保存场景的堆栈，默认一定是展示顶层的场景的（灯光，声音，后期等），关闭其他的，并且在每个场景里都绑定XScene组件负责收集需要的场景组件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XScene.cs</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="keyword">using</span> UnityEditor;</span><br><span class="line">    [<span class="meta">CustomEditor(typeof(XScene), true)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XSceneEditor</span> : <span class="title">Editor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnInspectorGUI();</span><br><span class="line">            <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;收集&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                (target <span class="keyword">as</span> XScene).Collect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SceneData _sceneData;</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Collect</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _sceneData._camera = FindObjectOfType&lt;Camera&gt;();</span><br><span class="line">        _sceneData._lights = <span class="keyword">new</span> List&lt;Light&gt;(FindObjectsOfType&lt;Light&gt;());</span><br><span class="line">        _sceneData._volume = FindObjectOfType&lt;Volume&gt;();</span><br><span class="line">        _sceneData._audioListener = FindObjectOfType&lt;AudioListener&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//SceneManager.cs</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;SceneTask&gt; _sceneMap = <span class="keyword">new</span> List&lt;SceneTask&gt;();</span><br><span class="line">    <span class="comment">//展示LoadSceneMode.Single场景的加载</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">SingleLoadTask</span>(<span class="params">SceneTask sceneTask</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">var</span> asHandle = Addressables.LoadSceneAsync(sceneTask._sceneName, sceneTask._loadSceneMode);</span><br><span class="line">        <span class="keyword">while</span> (!asHandle.IsDone)</span><br><span class="line">        &#123;</span><br><span class="line">            sceneTask._progress = asHandle.PercentComplete;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Bind</span></span><br><span class="line">        sceneTask._instance = asHandle.Result;</span><br><span class="line">        sceneTask.Bind();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//stack处理 这里不需要在管理其他堆栈的场景物件，因为Single的加载方式会卸载掉所有</span></span><br><span class="line">        _sceneMap.Clear();</span><br><span class="line">        _sceneMap.Add(sceneTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//SceneTask.cs</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bind</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _xScene = FindXScene(); <span class="comment">//找到场景里挂的XScene对象</span></span><br><span class="line">        <span class="keyword">if</span> (_xScene == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _xScene._sceneData.Bind();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题3 首先为什么不优雅 因为场景切换场景的时候存在摄像机丢失的问题 在ios上会之间黑屏 在android 不会，可能是内部渲染机制不同<br>解决 在切换场景的时候可以通过，可以通过唯一共享的相机来进行过渡</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Camera _changeMapCamera;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateChangeMapCamera</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_changeMapCamera == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> camera = <span class="keyword">new</span> GameObject(<span class="string">&quot;__MapChangeCamera&quot;</span>).AddComponent&lt;Camera&gt;();</span><br><span class="line">        GameObject.DontDestroyOnLoad(camera);</span><br><span class="line">        camera.enabled = <span class="literal">false</span>;</span><br><span class="line">        _changeMapCamera = camera;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//切换的时候 加上 _changeMapCamera.enable = true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;unity 的场景管理思路&lt;/p&gt;
&lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;加载场景是异步的 很容易出现在加载A场景的时候 同时卸载A场景，或者再次加载B</summary>
      
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    <category term="场景管理" scheme="http://example.com/categories/unity/%E5%9C%BA%E6%99%AF%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>ugui</title>
    <link href="http://example.com/2024/08/30/ugui/"/>
    <id>http://example.com/2024/08/30/ugui/</id>
    <published>2024-08-30T06:37:44.000Z</published>
    <updated>2025-04-03T06:03:40.992Z</updated>
    
    <content type="html"><![CDATA[<p>记录Unity UGUI 在使用时，值得记录的东西</p><h3 id="UGUI收集绘制列表"><a href="#UGUI收集绘制列表" class="headerlink" title="UGUI收集绘制列表"></a>UGUI收集绘制列表</h3><p>先说一下UI Depth 的概念  ps. 如果物体A的<span style="color: red;">网格覆盖在了物体B上面(物体在Hierarchy面板 谁靠后谁覆盖别的物体)</span>  此时如果物体A 的Depth 是0 物体B 的Depth1<br>展示一下流程</p><ol><li>UGUI 对所有物体的Depth 从小到大排序</li><li>对于相同Depth的物体按照MaterialID 就行 从小到大排序</li><li>对于相同MaterialID的物体按照TextureID 就行 从小到大排序</li><li>TextureID也相同话按照Hierarchy面板的顺序来</li></ol><h3 id="UGUI对绘制列表进行合批"><a href="#UGUI对绘制列表进行合批" class="headerlink" title="UGUI对绘制列表进行合批"></a>UGUI对绘制列表进行合批</h3><p>对于排序结果visiableList,相邻的元素 如果材质和贴图一样 即可合批<span style="color: red;">(就算深度不一样也是可以的)</span></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>对于合批是按照canvas下的UI的网格为单位的，当其中任何一共元素的材质，网格，位置，颜色，创建或者删除，都会触发重新进行合批的操作（ReBuild）</p><h3 id="一些案例"><a href="#一些案例" class="headerlink" title="一些案例"></a>一些案例</h3><p>如下图 存在5个Item对象 其中Item中的_imgHeroIcon是一张大图 而_imgHeroIConBg存在Mask组件对其进行裁剪，问题在于_imgHeroIcon的Mesh过大,和相邻的Item的Mesh 发生了重叠，导致了在合批的过程中Depth完全混乱，从而打断合批</p><center><figure>    <img src="image.png">    <figcaption>Depth错乱</figcaption></figure></center>解决：使用和Item本身大小一样的Mesh 去绘制_imgHeroIcon 其中的裁剪效果 通过UV进行修正<center><figure>    <img src="image1.png">    <figcaption>Mesh修正</figcaption></figure></center><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIMaskImage</span> : <span class="title">Image</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector2 _uvOffset = Vector2.zero;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPopulateMesh</span>(<span class="params">VertexHelper vh</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sprite == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnPopulateMesh(vh);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> uv = (sprite != <span class="literal">null</span>) ? DataUtility.GetOuterUV(sprite) : Vector4.zero;</span><br><span class="line">        <span class="keyword">var</span> rect = rectTransform.rect;</span><br><span class="line">        <span class="keyword">var</span> scale = <span class="keyword">new</span> Vector2(rect.width / sprite.rect.width,</span><br><span class="line">            rect.height / sprite.rect.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对UV缩放并添加偏移</span></span><br><span class="line">        <span class="keyword">var</span> uvSize = <span class="keyword">new</span> Vector2(uv.z - uv.x, uv.w - uv.y);</span><br><span class="line">        uv = <span class="keyword">new</span> Vector4(uv.x + (<span class="number">1</span> - scale.x) * uvSize.x * <span class="number">0.5f</span> + _uvOffset.x * <span class="number">0.01f</span>,</span><br><span class="line">            uv.y + (<span class="number">1</span> - scale.y) * uvSize.y * <span class="number">0.5f</span> + _uvOffset.y * <span class="number">0.01f</span>,</span><br><span class="line">            uv.z - (<span class="number">1</span> - scale.x) * uvSize.x * <span class="number">0.5f</span> + _uvOffset.x * <span class="number">0.01f</span>,</span><br><span class="line">            uv.w - (<span class="number">1</span> - scale.y) * uvSize.y * <span class="number">0.5f</span> + _uvOffset.y * <span class="number">0.01f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> padding = sprite == <span class="literal">null</span> ? Vector4.zero : DataUtility.GetPadding(sprite);</span><br><span class="line">        <span class="keyword">var</span> size = sprite == <span class="literal">null</span> ? Vector2.zero : <span class="keyword">new</span> Vector2(sprite.rect.width, sprite.rect.height);</span><br><span class="line"></span><br><span class="line">        Rect r = GetPixelAdjustedRect();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> spriteW = Mathf.RoundToInt(size.x);</span><br><span class="line">        <span class="built_in">int</span> spriteH = Mathf.RoundToInt(size.y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> v = <span class="keyword">new</span> Vector4(</span><br><span class="line">            padding.x / spriteW,</span><br><span class="line">            padding.y / spriteH,</span><br><span class="line">            (spriteW - padding.z) / spriteW,</span><br><span class="line">            (spriteH - padding.w) / spriteH);</span><br><span class="line"></span><br><span class="line">        v = <span class="keyword">new</span> Vector4(</span><br><span class="line">            r.x + r.width * v.x,</span><br><span class="line">            r.y + r.height * v.y,</span><br><span class="line">            r.x + r.width * v.z,</span><br><span class="line">            r.y + r.height * v.w</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> color32 = color;</span><br><span class="line">        vh.Clear();</span><br><span class="line">        vh.AddVert(<span class="keyword">new</span> Vector3(v.x, v.y), color32, <span class="keyword">new</span> Vector2(uv.x, uv.y));</span><br><span class="line">        vh.AddVert(<span class="keyword">new</span> Vector3(v.x, v.w), color32, <span class="keyword">new</span> Vector2(uv.x, uv.w));</span><br><span class="line">        vh.AddVert(<span class="keyword">new</span> Vector3(v.z, v.w), color32, <span class="keyword">new</span> Vector2(uv.z, uv.w));</span><br><span class="line">        vh.AddVert(<span class="keyword">new</span> Vector3(v.z, v.y), color32, <span class="keyword">new</span> Vector2(uv.z, uv.y));</span><br><span class="line"></span><br><span class="line">        vh.AddTriangle(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        vh.AddTriangle(<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录Unity UGUI 在使用时，值得记录的东西&lt;/p&gt;
&lt;h3 id=&quot;UGUI收集绘制列表&quot;&gt;&lt;a href=&quot;#UGUI收集绘制列表&quot; class=&quot;headerlink&quot; title=&quot;UGUI收集绘制列表&quot;&gt;&lt;/a&gt;UGUI收集绘制列表&lt;/h3&gt;&lt;p&gt;先说一下U</summary>
      
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    <category term="ugui相关" scheme="http://example.com/categories/unity/ugui%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>curveMap</title>
    <link href="http://example.com/2024/08/22/curveMap/"/>
    <id>http://example.com/2024/08/22/curveMap/</id>
    <published>2024-08-22T08:27:11.000Z</published>
    <updated>2025-04-03T06:03:44.855Z</updated>
    
    <content type="html"><![CDATA[<p>实现曲面地图效果s</p><center><img src="curveAnim.gif" width = "889" height = "912"></center><p>首先地图肯定是弯曲了,在制作流程中地图默认还是直的 但是在运行后会发生弯曲</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>核心思想是 通过shader的 _CurvePos（主角）位置 对Map 的网格的y坐标进行一个向下的偏移</p><figure class="highlight plaintext"><figcaption><span>shader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unlit/CurveMap&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">   [NoScaleOffset]</span><br><span class="line">        _MainTex (&quot;颜色纹理&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">_BendY(&quot;弯曲程度&quot;, Range(0,0.01)) = 0.0</span><br><span class="line">_CurvePos(&quot;弯曲起点&quot;,float) = 0</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot; &#125;</span><br><span class="line">        LOD 100</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            // make fog work</span><br><span class="line">            #pragma multi_compile_fog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">            struct appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line"></span><br><span class="line">//获取模型第一套UV</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                //定义顶点世界变量</span><br><span class="line">                float4 WordData : TEXCOORD1;</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">                UNITY_FOG_COORDS(4)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">//颜色纹理</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">float _BendY;</span><br><span class="line">            float _CurvePos;</span><br><span class="line">            v2f vert (appdata v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.uv = v.uv;</span><br><span class="line">                float3 WordPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                //获取Y轴坐标</span><br><span class="line">                o.WordData.x = WordPos.y;</span><br><span class="line">                //Y轴扭 = 曲依据Z坐标变化</span><br><span class="line">                WordPos.y -= pow(WordPos.z+_CurvePos, 2)*_BendY;</span><br><span class="line">                //获取位移位置</span><br><span class="line">                WordPos -= mul(unity_ObjectToWorld, float4(0, 0, 0, 1));</span><br><span class="line">                //修改世界顶点转回物体自身顶点。</span><br><span class="line">                v.vertex = mul(unity_WorldToObject, WordPos);</span><br><span class="line">                //转换为裁切空间</span><br><span class="line">                o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                UNITY_TRANSFER_FOG(o,o.vertex);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 col = tex2D(_MainTex, i.uv);</span><br><span class="line">                // apply fog</span><br><span class="line">                UNITY_APPLY_FOG(i.fogCoord, col);</span><br><span class="line">                return col;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主角"><a href="#主角" class="headerlink" title="主角"></a>主角</h3><p>主角的位置改变 将位置传递给shader 依次来改变地图曲线状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class CurveMapLogic : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Material _material; //地图材质</span><br><span class="line">    public static float _curveStrength = 0.0005f; //曲率</span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        _material.SetFloat(&quot;_BendY&quot;, _curveStrength);</span><br><span class="line">    &#125;</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        _material.SetFloat(&quot;_CurvePos&quot;, -1 * transform.position.z);</span><br><span class="line">    &#125;</span><br><span class="line">    //运行状态结束需要还原曲率</span><br><span class="line">    private void OnApplicationQuit()</span><br><span class="line">    &#123;</span><br><span class="line">        _material.SetFloat(&quot;_BendY&quot;, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="地图物件"><a href="#地图物件" class="headerlink" title="地图物件"></a>地图物件</h3><p>地图的物件在不运行状态还是贴合地面  运行后需要根据map shader的代码对y 的偏移同步对应的坐标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class CurveMapEntity : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private Transform _transform;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        var mainPlayerZ = CurvePlayer.Instance.transform.position.z;</span><br><span class="line">        var position = transform.position;</span><br><span class="line">        float distance = position.z - mainPlayerZ;</span><br><span class="line">        float y = Mathf.Pow(position.z + (-1 * mainPlayerZ), 2) * CurveMapLogic._curveStrength + distance / 100;</span><br><span class="line">        position.Set(position.x, -y, position.z);</span><br><span class="line">        transform.position = position;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用的注意"><a href="#使用的注意" class="headerlink" title="使用的注意"></a>使用的注意</h3><p>场景物体过多 可以统一进行update  在主角z坐标发生变化的时候 统一进行更新 不必每次Update<br>使用这种方法的时候 所有物体没法进行静态批处理 暂时不知道如何优化 理论上可以通过脚本和视野范围动态筛选 主动发起静态合批？需要在琢磨琢磨</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实现曲面地图效果s&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;curveAnim.gif&quot; width = &quot;889&quot; height = &quot;912&quot;&gt;&lt;/center&gt;

&lt;p&gt;首先地图肯定是弯曲了,在制作流程中地图默认还是直的 但是在运行后会发生弯曲&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    <category term="曲面地图" scheme="http://example.com/categories/unity/%E6%9B%B2%E9%9D%A2%E5%9C%B0%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>addressable</title>
    <link href="http://example.com/2024/08/22/addressable/"/>
    <id>http://example.com/2024/08/22/addressable/</id>
    <published>2024-08-22T02:29:07.000Z</published>
    <updated>2025-04-03T06:02:26.052Z</updated>
    
    <content type="html"><![CDATA[<p>做一个简单的使用记录 注意:以下在Bundle方式下运转的记录 不考虑编辑器模式</p><h3 id="Addressable的基础API"><a href="#Addressable的基础API" class="headerlink" title="Addressable的基础API"></a>Addressable的基础API</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> asset = Addressables.LoadAssetAsync&lt;T&gt;(key); <span class="comment">//加载Asset资产</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assetObj = Object.Instantiate(asset);<span class="comment">//通过asset实例化资源</span></span><br><span class="line"></span><br><span class="line">Addressables.Release(asset); <span class="comment">//释放Asset资产</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = Addressables.InstantiateAsync(key,parent); <span class="comment">// 实例化Asset</span></span><br><span class="line"></span><br><span class="line">Addressables.ReleaseInstance(obj);  <span class="comment">//释放实例化的资产</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sceneInstance = Addressables.LoadSceneAsync(sceneName,loadMode);<span class="comment">//加载场景</span></span><br><span class="line"></span><br><span class="line">Addressables.UnloadSceneAsync(sceneInstance);<span class="comment">//卸载场景</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的结果其实都是返回一个AsyncOperationHandle对象 获取的是对应的Result 他们都是异步的当需要同步拿到结果调用</span></span><br><span class="line">asyncHandle.WaitForCompletion();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Addressable-支持-await-async"><a href="#Addressable-支持-await-async" class="headerlink" title="Addressable 支持 await async"></a>Addressable 支持 await async</h3><p>增加 AsyncOperationHandle 对异步的支持</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IAsyncOperationExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AsyncOperationAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> AsyncOperationHandle operation</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncOperationAwaiter(operation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">AsyncOperationAwaiter</span>&lt;<span class="title">T</span>&gt; <span class="title">GetAwaiter</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> AsyncOperationHandle&lt;T&gt; operation</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncOperationAwaiter&lt;T&gt;(operation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> AsyncOperationAwaiter : INotifyCompletion</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> AsyncOperationHandle KOperation;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AsyncOperationAwaiter</span>(<span class="params">AsyncOperationHandle operation</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            KOperation = operation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsCompleted =&gt; KOperation.Status != AsyncOperationStatus.None;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            KOperation.Completed += (op) =&gt; continuation?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetResult</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> KOperation.Result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> AsyncOperationAwaiter&lt;T&gt; : INotifyCompletion <span class="keyword">where</span> T : <span class="keyword">class</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> AsyncOperationHandle&lt;T&gt; KOperation;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AsyncOperationAwaiter</span>(<span class="params">AsyncOperationHandle&lt;T&gt; operation</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            KOperation = operation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsCompleted =&gt; KOperation.Status != AsyncOperationStatus.None;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            KOperation.Completed += (op) =&gt; continuation?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">GetResult</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> KOperation.Result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载卸载的内部计数"><a href="#加载卸载的内部计数" class="headerlink" title="加载卸载的内部计数"></a>加载卸载的内部计数</h3><p>A.LoadAssetAsync 对应的Asset的计数+1 返回Asset资产<br>B.InstantiateAsync 对应的Asset的计数+1 返回实例化后的Asset<br>AB 使用同一个计数<br>C Release 对应的Asset 的计数 -1<br>D ReleaseInstance 对应的Asset 的计数 -1 实例化后的Asset删除<br>Asset的记数变成0后会被释放</p><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>在通过先加载资产，后自行实例化的方式调用需要注意，在这种情况下对资产进行释放后，<span style="color: red;">实例化出来的物体不会被销毁，但是它用到的所有资产都会被释放掉(计数为0)</span></p><center><figure>    <img src="image.png">    <figcaption>Addressable.LoadAssetAsync-Object.Instantiate</figcaption></figure></center><center><figure>    <img src="image-1.png">    <figcaption>Addressable.LoadAssetAsync-Object.Instantiate-Release</figcaption></figure></center><p>在通过直接实例化资源的时候，需要注意在这种情况下释放实例化资源<span style="color: red;">实例化的物体会同步被销毁</span></p><center><figure>    <img src="image-2.png">    <figcaption>Addressable.InstantiateAsync</figcaption></figure></center><center><figure>    <img src="image-3.png">    <figcaption>Addressable.InstantiateAsync-Addressables.ReleaseInstance</figcaption></figure></center><p>其他坑<br>1.<a href="https://issuetracker.unity3d.com/issues/freeze-when-loading-the-scene-asynchronously-and-using-waitforcompletion">场景释放后再能进行同步加载</a><br>2.异步加载对象A的时候 不能直接调用同步加载对象A必须等异步完成<br>3.<a href="https://discussions.unity.com/t/call-addressables-loadassetasync-and-waitforcompletion-cause-an-error/906421/3">热更新完成后,加载资源报错</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;做一个简单的使用记录 注意:以下在Bundle方式下运转的记录 不考虑编辑器模式&lt;/p&gt;
&lt;h3 id=&quot;Addressable的基础API&quot;&gt;&lt;a href=&quot;#Addressable的基础API&quot; class=&quot;headerlink&quot; title=&quot;Addressabl</summary>
      
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    <category term="addressable" scheme="http://example.com/categories/unity/addressable/"/>
    
    
  </entry>
  
  <entry>
    <title>unity的合批</title>
    <link href="http://example.com/2024/08/07/instance/"/>
    <id>http://example.com/2024/08/07/instance/</id>
    <published>2024-08-07T09:03:17.000Z</published>
    <updated>2025-04-03T06:00:53.574Z</updated>
    
    <content type="html"><![CDATA[<p>unity的合批有很多类型  <em>静态</em> , <em>动态</em> , <em>GpuInstance</em> , <em>SrpBatch</em></p><p>众所周知,绘制一个网格 需要 <span style="color: red;">网格的顶点(Vectex),网格顶点组成三角面片的排序信息(Index)</span>unity 在绘制一个物体的时候 物体需要提交自己的状态(使用什么纹理,网格,材质等) 被叫做SetPass的消耗在之后才是真正进行绘制的该物体的操作（DrawCall）</p><h2 id="静态批处理"><a href="#静态批处理" class="headerlink" title="静态批处理"></a>静态批处理</h2><p>原理: 对所有使用<span style="color: red;">相同材质</span>的网格进行合并 这样上交网格的Vectex和Index的时候,只需要上交一次,减少了网格上交时的SetPass的消耗</p><p>注意点: 需要绘制的物体 在合批的网格物体的顺序如果是连续的(Vectex Index连续)，那么它们的可以合并一个DrawCall的，所以理论上<span style="color: red;">静态批处理很难有效的降低DrawCall 的消耗</span></p><p>缺点: 标记为静态的物体需要开启读写，占用一倍的内存</p><p>拓展：可以通过c#的api 在运行中进行静态合批,比如房间的门 在打开的瞬间解除静态合批，打开后在加入静态合批 也是不错的策略</p><h2 id="动态批处理"><a href="#动态批处理" class="headerlink" title="动态批处理"></a>动态批处理</h2><p>原理: 运行过程中对满足条件的网格合并成一个（Vectex和Index），后上交网格 条件是：<br><span style="color: red;">1.相同材质</span><br><span style="color: red;">2.Transform的Scale不能镜像</span><br><span style="color: red;">3.顶点属性数量不能大于900</span><br><span style="color: red;">4.单Pass</span><br><span style="color: red;">5.网格实例应该引用相同的光照纹理文件</span></p><p>缺点: 动态合批对应性能消耗很大，需要实时合并网格</p><h3 id="常量缓冲区（ConstantBuffer）"><a href="#常量缓冲区（ConstantBuffer）" class="headerlink" title="常量缓冲区（ConstantBuffer）"></a>常量缓冲区（ConstantBuffer）</h3><p>先了解URP中的 Shader的 常量缓冲区CBUFFER在来谈 SRP Batcher是合理的</p><p>概念:用于cpu向gpu中的shader程序提供单帧的常量数据,常量缓冲区是GPU资源 可以理解为Gpu的显存<br><span style="color: red;">每帧更新，且每次更新提交的数据都是整个CBuffer</span>， 同时，常量的概念只是在单帧内保持不变，整个游戏运行过程中是允许修改这些buffer的。<a href="https://www.cnblogs.com/lanyelinxiang/p/16792845.html">goto</a></p><h2 id="SRP-Batcher"><a href="#SRP-Batcher" class="headerlink" title="SRP Batcher"></a>SRP Batcher</h2><p>原理：cpu 在进行SetPass 的时候 实际上需要创建CBuffer-上传CBuffer,但是在Srp的设计中所有的材质球占有了固定位置的CBuffer，如果这个材质球不变，那么不需要对目标的CBuffer进行创建-上传的操作，实际上优化的是材质内容在CBuffer的消耗，所有理论上不会优化DrawCall的数量</p><p>注意点:<br>1.不能使用MaterialPropertyBlock改变材质的内容（显而易见）<br>2.被渲染的物体必须是mesh或skinned mesh，不可以是particle</p><h2 id="GPU-Instancing"><a href="#GPU-Instancing" class="headerlink" title="GPU Instancing"></a>GPU Instancing</h2><p>GPU Instancing适用于处理大量相同物体<br>原理：一次绘制所有相同的物体，物体的材质，网格相同 并且 <span style="color: red;">shader必须支持GPUInstancing</span></p><p>#扩展 可以使用Graphics.DrawMesh，Graphics. DrawMeshInstanced 主动进行GpuInstancing，可以使用MaterialPropertyBlock单独对某个物体修改对应的材质参数，如果是多Pass的shader，只有第一个Pass可以被处理</p><p>应用 gpuinstance 可以通过帧动画（shader通过uv流动实现播放对应的动画片段） 实现 大规模的人物绘制，对于蒙皮类型的骨骼，也可以将骨骼运动坐标偏移偏移烘培到一张贴图上可以实现蒙皮人物的大规模复制，但是都有相同的缺点是无法进行动画融合</p><h2 id="other-注意"><a href="#other-注意" class="headerlink" title="other 注意"></a>other 注意</h2><p><span style="color: red;">当调用 render组件的material的时候会创建出新的material实例</span>,会<span style="color: red;">中断</span>需要材质相同的合批,需要注意. 并且在删除改物体的时候 需要额外删除对应的新的material实例，否将发生内存泄漏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;unity的合批有很多类型  &lt;em&gt;静态&lt;/em&gt; , &lt;em&gt;动态&lt;/em&gt; , &lt;em&gt;GpuInstance&lt;/em&gt; , &lt;em&gt;SrpBatch&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;众所周知,绘制一个网格 需要 &lt;span style=&quot;color: red;&quot;&gt;网格的顶点</summary>
      
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    <category term="合批&quot;" scheme="http://example.com/categories/unity/%E5%90%88%E6%89%B9/"/>
    
    
    <category term="渲染" scheme="http://example.com/tags/%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>构建blog</title>
    <link href="http://example.com/2024/08/06/hello-world/"/>
    <id>http://example.com/2024/08/06/hello-world/</id>
    <published>2024-08-06T09:00:00.000Z</published>
    <updated>2025-04-03T06:23:50.818Z</updated>
    
    <content type="html"><![CDATA[<p>构建 Hexo Blog 过程</p><h2 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h2><ol><li>安装<a href="https://nodejs.org/zh-cn">Node.js</a></li><li>安装<a href="https://git-scm.com/">Git</a></li><li>安装Hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><h3 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;  //layout 默认提供draft page post 默认使用配置在 _config.yml</span><br></pre></td></tr></table></figure><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="创建本地服务器-浏览效果-localhost"><a href="#创建本地服务器-浏览效果-localhost" class="headerlink" title="创建本地服务器 浏览效果 localhost"></a>创建本地服务器 浏览效果 <a href="http://localhost:4000/">localhost</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-hide-posts --save   //并在文章的头 添加 hidden: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p>在 _config.yml 里添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: github    //仓库地址 https开头的</span><br><span class="line">  branch: main    //分支</span><br><span class="line">  执行命令</span><br><span class="line">$  hexo clean</span><br><span class="line">$  hexo deploy</span><br></pre></td></tr></table></figure><h3 id="使用简单的皮肤brewski"><a href="#使用简单的皮肤brewski" class="headerlink" title="使用简单的皮肤brewski"></a>使用简单的皮肤<a href="https://github.com/tiaanduplessis/hexo-theme-brewski">brewski</a></h3><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;构建 Hexo Blog 过程&lt;/p&gt;
&lt;h2 id=&quot;构建环境&quot;&gt;&lt;a href=&quot;#构建环境&quot; class=&quot;headerlink&quot; title=&quot;构建环境&quot;&gt;&lt;/a&gt;构建环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装&lt;a href=&quot;https://nodejs.org/zh-</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    <category term="构建Hexo流程&quot;" scheme="http://example.com/categories/Hexo/%E6%9E%84%E5%BB%BAHexo%E6%B5%81%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
